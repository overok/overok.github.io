import{_ as l,r as c,o as r,c as i,b as n,d as s,e as d,n as e,f as t,a as p}from"./app-dc634640.js";const u={},k=n("h1",{id:"css",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css","aria-hidden":"true"},"#"),s(" CSS")],-1),v={href:"https://juejin.cn/post/7020064738956705823/",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="js-样式" tabindex="-1"><a class="header-anchor" href="#js-样式" aria-hidden="true">#</a> js 样式</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//滚动到页面顶部</span>
<span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">//将文字复制到剪贴板</span>
<span class="token keyword">const</span> <span class="token function-variable function">copyTextToClipboard</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//星星评分</span>
<span class="token keyword">const</span> <span class="token function-variable function">StartScore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">rate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;★★★★★☆☆☆☆☆&#39;</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">-</span> rate<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">-</span> rate<span class="token punctuation">)</span>
<span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">StartScore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//&#39;★★★☆☆&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> base64</h2><ul><li>base64 编码后的图片会比原来的体积大三分之一左右。</li><li>Data URL 形式的图片不会缓存下来，每次访问页面都要被下载一次。可以将 Data URL 写入到 CSS 文件中随着 CSS 被缓存下来。</li></ul><h2 id="判断当前环境是移动端还是-pc-端" tabindex="-1"><a class="header-anchor" href="#判断当前环境是移动端还是-pc-端" aria-hidden="true">#</a> 判断当前环境是移动端还是 PC 端</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">isPc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> userAgentInfo <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
    <span class="token keyword">var</span> Agents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>
      <span class="token string">&#39;Android&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;iPhone&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;SymbianOS&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;Windows Phone&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;iPad&#39;</span><span class="token punctuation">,</span>
      <span class="token string">&#39;iPod&#39;</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span>
    flag <span class="token operator">=</span> <span class="token operator">!</span>Agents<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userAgentInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> flag
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="canvas-如何处理跨域的图片" tabindex="-1"><a class="header-anchor" href="#canvas-如何处理跨域的图片" aria-hidden="true">#</a> Canvas 如何处理跨域的图片</h2><p>img.setAttribute(&quot;crossOrigin&quot;, &quot;anonymous&quot;);</p><h2 id="选中-dom" tabindex="-1"><a class="header-anchor" href="#选中-dom" aria-hidden="true">#</a> 选中 DOM</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span><span class="token constant">E</span><span class="token operator">:</span>first<span class="token operator">-</span>child <span class="token operator">--</span><span class="token operator">-</span> 父元素的第一个子元素，且标签为指定的标签<span class="token constant">E</span>
<span class="token number">2.</span><span class="token constant">E</span><span class="token operator">:</span>last<span class="token operator">-</span>child <span class="token operator">--</span><span class="token operator">-</span> 最后一个子元素<span class="token punctuation">,</span>同上
<span class="token number">4.</span><span class="token constant">E</span><span class="token operator">:</span>last<span class="token operator">-</span><span class="token keyword">of</span><span class="token operator">-</span>type <span class="token operator">--</span><span class="token operator">-</span> 最后一个子元素<span class="token punctuation">,</span>同上
<span class="token number">5.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 第n个子元素，从一开始里面写<span class="token number">5</span>就是第四个标签
<span class="token number">6.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span>last<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 同<span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 相似，只是倒着计算
<span class="token number">7.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 所有的偶数
<span class="token number">8.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 所有的奇数
<span class="token number">9.</span><span class="token constant">E</span><span class="token operator">:</span>empty <span class="token operator">--</span><span class="token operator">-</span> 空值<span class="token operator">:</span>没有任何的内容，连空格都没有
<span class="token number">10.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span>last<span class="token operator">-</span><span class="token keyword">of</span><span class="token operator">-</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 为前五加样式
<span class="token number">11.</span><span class="token constant">E</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token keyword">of</span><span class="token operator">-</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">-</span> 后五个加样式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="默认样式" tabindex="-1"><a class="header-anchor" href="#默认样式" aria-hidden="true">#</a> 默认样式</h2><p>body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; } body, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; } h1, h2, h3, h4, h5, h6{ font-size:100%; } address, cite, dfn, em, var { font-style:normal; } code, kbd, pre, samp { font-family:couriernew, courier, monospace; } small{ font-size:12px; } ul, ol { list-style:none; } a { text-decoration:none; } a:hover { text-decoration:underline; } sup { vertical-align:text-top; } sub{ vertical-align:text-bottom; } legend { color:#000; } fieldset, img { border:0; } button, input, select, textarea { font-size:100%; } table { border-collapse:collapse; border-spacing:0; }</p><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1.</span>父级div定义伪类：after和zoom
<span class="token number">2.</span><span class="token literal-property property">在结尾处添加空div标签clear</span><span class="token operator">:</span>both
<span class="token number">3.</span>父级div定义height
<span class="token number">4.</span><span class="token literal-property property">父级div定义overflow</span><span class="token operator">:</span>hidden
<span class="token number">5.</span><span class="token literal-property property">父级div定义display</span><span class="token operator">:</span>table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="em-px-rem-区别" tabindex="-1"><a class="header-anchor" href="#em-px-rem-区别" aria-hidden="true">#</a> em\\px\\rem 区别</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>px：绝对单位，⻚⾯按精确像素展示。
em：相对单位，基准点为⽗节点字体的⼤⼩
rem：相对单位<span class="token punctuation">,</span> 相对根节点html的字体⼤⼩来计算，<span class="token constant">CSS3</span>新加属性，chrome<span class="token operator">/</span>firefox<span class="token operator">/</span><span class="token constant">IE9</span><span class="token operator">+</span>⽀持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置动态-class-style" tabindex="-1"><a class="header-anchor" href="#设置动态-class-style" aria-hidden="true">#</a> 设置动态 class，style？</h2>`,17),h=p(`<h2 id="图片自适应视口的大小缩放" tabindex="-1"><a class="header-anchor" href="#图片自适应视口的大小缩放" aria-hidden="true">#</a> 图片自适应视口的大小缩放</h2><p>img{ max-width: 100%; height: auto; }</p><h2 id="超级居中-完美居中-and-毛玻璃" tabindex="-1"><a class="header-anchor" href="#超级居中-完美居中-and-毛玻璃" aria-hidden="true">#</a> 超级居中，完美居中 and 毛玻璃</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//居中</span>
<span class="token punctuation">.</span>parent <span class="token punctuation">{</span>
  <span class="token literal-property property">display</span><span class="token operator">:</span> grid<span class="token punctuation">;</span>
  place<span class="token operator">-</span>items<span class="token operator">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//毛玻璃</span>
backdrop<span class="token operator">-</span>filter<span class="token operator">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>6px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给元素后面区域添加模糊效果</span>
<span class="token comment">//数字等宽（不等宽的数字会造成元素位置的偏移）</span>
font<span class="token operator">-</span>variant<span class="token operator">-</span>numeric<span class="token operator">:</span> tabular<span class="token operator">-</span>nums<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="display-inline-block产生间隙" tabindex="-1"><a class="header-anchor" href="#display-inline-block产生间隙" aria-hidden="true">#</a> display:inline-block产生间隙</h1><ul><li>原因：换行或空格会占据一定的位置</li><li>解决方法： <ul><li>除去当前元素的空格或换行</li><li>当前元素的父元素中设置font-size:0;</li><li>在当前元素的父元素中设置letter-spaceing:-4px;</li></ul></li></ul><h1 id="让页面里的字体变清晰-变细用css怎么做" tabindex="-1"><a class="header-anchor" href="#让页面里的字体变清晰-变细用css怎么做" aria-hidden="true">#</a> 让页面里的字体变清晰，变细用CSS怎么做</h1><p>-webkit-font-smoothing: antialiased;</p><h1 id="动画的最小时间间隔是多久" tabindex="-1"><a class="header-anchor" href="#动画的最小时间间隔是多久" aria-hidden="true">#</a> 动画的最小时间间隔是多久</h1><p>16.7ms 多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔: 1s / 60 * 1000 ＝ 16.7ms</p>`,10);function b(a,f){const o=c("ExternalLinkIcon");return r(),i("div",null,[k,n("p",null,[n("a",v,[s("手写 loading 样式"),d(o)]),s("👨🏻‍💻")]),m,n("ul",null,[n("li",null,[s("动态 class 对象："),n("div",{class:e({"is-active":!0,red:a.isRed})},null,2)]),n("li",null,[s("动态 class 数组："),n("div",{class:e(["is-active",a.isRed?"red":""])},null,2)]),n("li",null,[s("动态 style 对象："),n("div",{style:t({color:a.textColor,fontSize:"18px"})},null,4)]),n("li",null,[s("动态 style 数组："),n("div",{style:t([{color:a.textColor,fontSize:"18px"},{fontWeight:"300"}])},null,4)])]),h])}const y=l(u,[["render",b],["__file","Css.html.vue"]]);export{y as default};
