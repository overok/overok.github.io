import{_ as s,o as n,c as a,a as t}from"./app-dc634640.js";const p={},e=t(`<h1 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h1><h2 id="什么是nodejs" tabindex="-1"><a class="header-anchor" href="#什么是nodejs" aria-hidden="true">#</a> 什么是NodeJS</h2><p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p><p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了document之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了fs、http等内置对象。</p><h2 id="node核心" tabindex="-1"><a class="header-anchor" href="#node核心" aria-hidden="true">#</a> node核心</h2><p>核心模块：EventEmitter, Stream, FS, Net和全局对象</p><p>全局对象：process, console, Buffer和exports</p><h2 id="exports和module-exports区别" tabindex="-1"><a class="header-anchor" href="#exports和module-exports区别" aria-hidden="true">#</a> exports和module.exports区别</h2><p>exports 是 module.exports 的一个引用 module.exports 初始值为一个空对象 {}，所以 exports 初始值也是 {} require 引用模块后，返回的是 module.exports 而不是 exports</p><h2 id="_2-单线程优点" tabindex="-1"><a class="header-anchor" href="#_2-单线程优点" aria-hidden="true">#</a> 2.单线程优点</h2><p>Node.js依托于v8引擎，都是以单线程为基础的。单线程资源占用小。单线程避免了传统PHP那样频繁创建、切换线程的开销，使执行速度更加迅速</p><h2 id="_3-node-js是如何做到i-o的异步和非阻塞的呢" tabindex="-1"><a class="header-anchor" href="#_3-node-js是如何做到i-o的异步和非阻塞的呢" aria-hidden="true">#</a> 3.Node.js是如何做到I/O的异步和非阻塞的呢</h2><p>其实Node在底层访问I/O还是多线程的。Node可以借助livuv来来实现多线程。</p><p>如果我们非要让Node.js支持多线程，还是提倡使用官方的做法，利用libuv库来实现。</p><h2 id="_5-谈谈nodejs优缺点" tabindex="-1"><a class="header-anchor" href="#_5-谈谈nodejs优缺点" aria-hidden="true">#</a> 5.谈谈Nodejs优缺点</h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li><p>事件驱动，异步编程，占用内存少</p></li><li><p>npm设计得好</p></li></ol><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ol><li>Debug 很困难。没有 stack trace，出了问题很难查找问题的原因；</li></ol><p>2 .如果设计不好，很容易让代码充满 callback，代码不优雅；</p><ol start="3"><li>单进程，单线程，只支持单核CPU，不能充分的利用多核CPU服务器。</li></ol><h2 id="pm2" tabindex="-1"><a class="header-anchor" href="#pm2" aria-hidden="true">#</a> PM2</h2><p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p><h3 id="pm2-的主要特性" tabindex="-1"><a class="header-anchor" href="#pm2-的主要特性" aria-hidden="true">#</a> PM2 的主要特性</h3><ul><li>内建负载均衡（使用 Node cluster 集群模块）</li><li>后台运行</li><li>0 秒停机重载</li><li>具有 Ubuntu 和 CentOS 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 HTTP API</li><li>远程控制和实时的接口 API ( Nodejs 模块,允许和 PM2 进程管理器交互 )</li></ul><blockquote><blockquote><p>常用命令</p></blockquote></blockquote><ul><li>pm install -g pm2 安装</li><li>pm2 start app.js 运行命令</li><li>pm2 restart app.js 重启命令</li><li>pm2 stop all 如果需要停止全部的应用</li><li>pm2 delete app_name | app_id 删除命令</li><li>pm2 list 查看有哪些进程</li><li>pm2 start app.js 运行命令</li></ul><blockquote><p>命令行参数</p></blockquote><ul><li>--watch：监听应用目录的变化，一旦发生变化，自动重启。</li><li>-i or --instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。</li><li>--ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</li></ul><blockquote><p>负载均衡(可以使用 -i 参数配置集群数，实现负载均衡)</p></blockquote><ul><li>pm2 start app.js -i 3 // 开启三个进程</li><li>pm2 start app.js -i max // 根据机器CPU核数，开启对应数目的进程</li><li>pm2 logs //日志查看</li><li>pm2 monit //监控</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//pm2.json 中配置文件</span>
<span class="token punctuation">{</span>
    <span class="token string-property property">&quot;apps&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;express_project&quot;</span><span class="token punctuation">,</span>       <span class="token comment">// 项目名          </span>
        <span class="token string-property property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;app.js&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// 执行文件</span>
        <span class="token string-property property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>                     <span class="token comment">// 根目录</span>
        <span class="token string-property property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>                      <span class="token comment">// 传递给脚本的参数</span>
        <span class="token string-property property">&quot;interpreter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>               <span class="token comment">// 指定的脚本解释器</span>
        <span class="token string-property property">&quot;interpreter_args&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>          <span class="token comment">// 传递给解释器的参数</span>
        <span class="token string-property property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment">// 是否监听文件变动然后重启</span>
        <span class="token string-property property">&quot;ignore_watch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token comment">// 不用监听的文件</span>
            <span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;public&quot;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;exec_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cluster_mode&quot;</span><span class="token punctuation">,</span>     <span class="token comment">// 应用启动模式，支持 fork 和 cluster 模式</span>
        <span class="token string-property property">&quot;instances&quot;</span><span class="token operator">:</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// 应用启动实例个数，仅在 cluster 模式有效 默认为 fork</span>
        <span class="token string-property property">&quot;error_file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./logs/app-err.log&quot;</span><span class="token punctuation">,</span>         <span class="token comment">// 错误日志文件</span>
        <span class="token string-property property">&quot;out_file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./logs/app-out.log&quot;</span><span class="token punctuation">,</span>           <span class="token comment">// 正常日志文件</span>
        <span class="token string-property property">&quot;merge_logs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                         <span class="token comment">// 设置追加日志而不是新建日志</span>
        <span class="token string-property property">&quot;log_date_format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// 指定日志文件的时间格式</span>
        <span class="token string-property property">&quot;min_uptime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60s&quot;</span><span class="token punctuation">,</span>                        <span class="token comment">// 应用运行少于时间被认为是异常启动</span>
        <span class="token string-property property">&quot;max_restarts&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                         <span class="token comment">// 最大异常重启次数</span>
        <span class="token string-property property">&quot;autorestart&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment">// 默认为 true, 发生异常的情况下自动重启</span>
        <span class="token string-property property">&quot;restart_delay&quot;</span><span class="token operator">:</span> <span class="token string">&quot;60&quot;</span>                       <span class="token comment">// 异常重启情况下，延时重启时间</span>
        <span class="token string-property property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token string-property property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>                <span class="token comment">// 环境参数，当前指定为生产环境</span>
           <span class="token string-property property">&quot;REMOTE_ADDR&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>               
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;env_dev&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// 环境参数，当前指定为开发环境</span>
            <span class="token string-property property">&quot;REMOTE_ADDR&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;env_test&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>                               <span class="token comment">// 环境参数，当前指定为测试环境</span>
            <span class="token string-property property">&quot;NODE_ENV&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;REMOTE_ADDR&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32),o=[e];function r(l,i){return n(),a("div",null,o)}const u=s(p,[["render",r],["__file","Node.html.vue"]]);export{u as default};
