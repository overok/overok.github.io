import{_ as a,o as n,c as s,a as e}from"./app-dc634640.js";const i={},t=e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h1><h2 id="java-1" tabindex="-1"><a class="header-anchor" href="#java-1" aria-hidden="true">#</a> java</h2><ul><li>JVM: java 虚拟机，java 需要在 jvm 上运行。</li><li>JRE：java 的运行环境，包含了 jvm 和 java 的核心类库。</li><li>JDK：java 的开发工具，包含了 jre 和开发工具。</li></ul><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>包的本质就是一个文件夹
<span class="token comment">//命名规则</span>
一般是小写字母<span class="token operator">+</span>小圆点（com<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>user 用户模块 com<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>crm<span class="token punctuation">.</span>order 订单模块）
<span class="token comment">//常用包（一个包下包含很多类）</span>
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>*  <span class="token comment">//基本包，默认引入</span>
java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*  <span class="token comment">//系统工具包，工具类，使用scanner</span>
java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>*  <span class="token comment">//网络包，网络开发</span>
java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*  <span class="token comment">//做JAVA界面开发，GUL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标识符的命名规范" tabindex="-1"><a class="header-anchor" href="#标识符的命名规范" aria-hidden="true">#</a> 标识符的命名规范</h2><ul><li>1、类名，接口名 所有单词的首字母大写 例如：String，System，HelloWorld</li><li>2、变量名 第一个单词首字母小写，其余单词首字母大写 例如：age，maxValue</li><li>3、包名 所有字母都小写，单词之间使用.分割 例如：java.lang</li><li>4、常量名 所有字母都大写，单词之间使用下划线 例如：MAX_VALUE</li></ul><h2 id="面向对象的三个基本特征和高级特性" tabindex="-1"><a class="header-anchor" href="#面向对象的三个基本特征和高级特性" aria-hidden="true">#</a> 面向对象的三个基本特征和高级特性</h2><p>//基本特性(封装,继承,多态) //高级特性(枚举,接口,抽象,泛型,Lambda 表达式......)</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//属性</span>
<span class="token number">1.</span>子类继承父类时，一定会继承父类的所有的属性，包括私有的，但是由于私有的关键字<span class="token keyword">private</span>的原因，在子类中无法直接操作它，但是可以通过get<span class="token operator">/</span>set方式操作它
<span class="token number">2.</span>当子类的属性与父类的属性重名时，而且父类的属性没有私有化，如果要访问父类的属性那么通过<span class="token keyword">super</span><span class="token punctuation">.</span>属性进行访问，如果子类中没有通过<span class="token keyword">super</span><span class="token punctuation">.</span>属性访问，那这个属性就表示是子类自己的
<span class="token comment">//方法</span>
<span class="token number">1.</span>子类继承父类时，一定会继承父类的所有的方法，包括私有的，但是由于<span class="token keyword">private</span>，在子类中无法直接操作，但是可以间接操作，<span class="token keyword">super</span><span class="token punctuation">.</span>方法
<span class="token number">2.</span>当父类的方法实现不适用于子类时，子类可以对父类的方法的进行重写
<span class="token comment">//构造器</span>
<span class="token number">1.</span>子类继承父类时，不会继承父类的构造器
<span class="token number">2.</span>子类继承父类时，一定会调用父类的构造器<span class="token punctuation">(</span>通过<span class="token keyword">super</span><span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span>方法调用<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//权限修饰</span>
<span class="token keyword">public</span>；公共的，范围：任意位置，可以修饰类、成员
<span class="token keyword">protected</span>：受保护的，范围：本包或子类中，可以修饰成员
<span class="token keyword">default</span>：默认的，范围：本包，可以修饰类、成员
<span class="token keyword">private</span>：私有的，范围：本类中，可以修饰成员
<span class="token comment">//static 静态的</span>
<span class="token comment">//final 这个方法不能被重写,这个类不能被继承,变量值不能被修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://www.aoyingtech.net/upload/mt360/img/code/code-4.jpg" style="border-radius:10px;"><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h2><p>Lambda 表达式，是 jdk8 的一个语法糖，对某些匿名内部类进行简化，类似元前端箭头函数 (参数列表)-&gt;{ 代码 }</p>`,16),l=[t];function c(p,d){return n(),s("div",null,l)}const r=a(i,[["render",c],["__file","Java.html.vue"]]);export{r as default};
